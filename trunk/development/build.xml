<?xml version="1.0" encoding="UTF-8"?>
<!--
  ANT build.xml file for the "WDBear Manager project"


        Gerhard Leibrock, 2005/2006
        
        aka Kizura aka Lousyplayer
  
  lousy.kizura@gmail.com

        $Id: build.xml 216 2006-09-10 16:55:52Z gleibrock $

        Targets:
        (most important)
        
        build        -> Creates full client (build\deploy) and
                        EJB/EAR, but does *not* deploy the EJB/EAR
        
        make-install -> create complete installable distribution
                        See directory: build\make-install
                        
        Important:
        Please change 'jar.repository' to where you store your java
        archives (JAR, ZIP, etc).
                        
  version   $Rev: 216 $
                        
-->
<project name="wdbear_manager" default="build" basedir="./">

    <property environment="env" />
    <property name="projectdir" value="${basedir}" />
    <property name="src.base" value="${projectdir}/src-base/java" />
    <property name="src.main" value="${projectdir}/src/java" />
    <property name="src.test" value="${projectdir}/test/java" />
    <property name="src.generated" value="${projectdir}/src-generated" />
    <!-- output directory for the classes -->
    <property name="build.classes.dir" value="${projectdir}/build/classes-ant" />
    <!-- Name of the application -->
    <property name="application" value="wdbearmanager" />
    <!-- Name of the JAR that creates the application -->
    <property name="application_jar" value="${application}.jar" />


    <!-- This target is used to compile the program
    o compiles src.base
      framework classes, that do not belong directly to this project
    o compiles src.generated
      source files that were generated by source code generators
    o compiles src.main
      the program itself
    o compiles src.test
      unit tests, other tests
   -->
    <target name="compile" depends="cache.download">
        <!--
<echo message="Using this base directory=${projectdir}" />
<echo message="Using this source directory=${srcdir}" />
<echo message="Using this build.classes.dir directory=${build.classes.dir}" />
<echo message="Using this projectdir.mimes directory=${projectdir.mimes}" />
-->
        <mkdir dir="${build.classes.dir}" />
        <mkdir dir="${projectdir}\build\deploy" />

        <echo message="Compiling base..." />
        <javac srcdir="${src.base}" destdir="${build.classes.dir}"
               debug="on" deprecation="on"
               optimize="off" classpathref="project.class.path" />
        <echo message="Compiling src.generated..." />
        <!--
        <javac srcdir="${src.generated}"
            destdir="${build.classes.dir}"
            debug="on"
            deprecation="on"
            optimize="off"
            classpathref="project.class.path" />
        -->
        <echo message="Compiling src.main..." />
        <javac srcdir="${src.main}" destdir="${build.classes.dir}"
            debug="on" deprecation="on"
            optimize="off" classpathref="project.class.path" />
        <echo message="Compiling src.test..." />
        <javac srcdir="${src.test}" destdir="${build.classes.dir}"
            debug="on" deprecation="on" optimize="off"
            classpathref="project.class.path" />

        <copy todir="${build.classes.dir}">
            <fileset dir="${src.main}">
                <include name="**/*.xml" />
                <include name="**/*.csv" />
                <include name="**/*.properties" />
                <include name="**/*.txt" />
                <include name="**/*.gif" />
                <include name="**/*.jpg" />
                <!-- is copied seperately, so the user can modify it -->
                <exclude name="wdb_compatibility.properties" />
            </fileset>
            <fileset dir="${src.test}">
                <include name="**/*.xml" />
                <include name="**/*.csv" />
                <include name="**/*.properties" />
                <include name="**/*.txt" />
                <include name="**/*.gif" />
                <include name="**/*.jpg" />
            </fileset>
        </copy>
    </target>

    <!-- This JAR contains ALL files
       It can be used as a standalone application (Client)
   -->
    <target name="genJAR" depends="compile">
        <!--            manifest="${projectdir}/dev-ressources/META-INF/MANIFEST.MF" -->

      <path id="library.Project">
        <fileset dir="${projectdir}/build/deploy">
          <include name="jars/*.jar"/>
        </fileset>
      </path>

      <!-- convert the libraries to be included in the 
        Class-Path attribute of the MANIFEST.MF file -->
      <pathconvert property="lib.project.manifest.classpath"
                   pathsep=" ">
        <path refid="library.Project"/>
        <map from="" to="jars/"/>
        <flattenmapper/>
      </pathconvert>
      
      <jar jarfile="${projectdir}/build/deploy/${application_jar}">
            <fileset dir="${projectdir}\build\classes-ant">
                <include name="**/*.*" />
                <exclude name="com/gele/tools/wow/wdbearmanager/test/**.*" />
                <exclude name="wdbearmanager_sql.properties" />
                <exclude name="log4j.xml" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
              <!--
                <attribute name="Class-Path" value="jars/commons-cli-1.0.jar jars/hsqldb.jar jars/log4j-1.2.9.jar jars/castor-0.9.6.jar jars/xercesImpl.jar jars/commons-logging.jar jars/xml-apis.jar jars/kunststoff.jar jars/mysql-connector-java-3.1.7-bin.jar jars/ojdbc14_9.2.0.3.jar jars/jython.jar jars ." />
              -->
              <attribute name="Class-Path"
                         value="${lib.project.manifest.classpath} jars ."/>
                <attribute name="Manifest-Version" value="1.0" />
                <attribute name="Main-Class" value="com.gele.tools.wow.wdbearmanager.WDBearManager" />
                <attribute name="Created-By" value="Kizura Zgabi" />
                <attribute name="Implementation-Vendor" value="com.gele" />
                <attribute name="Implementation-Title" value="WDBear Manager" />
                <attribute name="Implementation-Version" value="1.0" />
            </manifest>
        </jar>
        <jar jarfile="${projectdir}/build/deploy/test_${application_jar}">
            <fileset dir="${projectdir}\build\classes-ant">
                <include name="com/gele/tools/wow/wdbearmanager/test/**.*" />
            </fileset>
        </jar>
      <!-- calculate MD5 checksum -->
      <checksum file="${projectdir}/build/deploy/${application_jar}" forceOverwrite="yes"/>

    </target>

    <!--
      Create install dir with all needed files for the installation.
      Hint:
      You need to have a copy of "Installations- und Betriebsanleitung.doc"
      to fully understand the process of installation.
    -->
    <target name="make-install" depends="copy3rdparty, compile">
      <!--
        <delete dir="${projectdir}\build\deploy" />
        -->
        <mkdir dir="${projectdir}\build\deploy" />
        <mkdir dir="${projectdir}\build\deploy\doc" />
      
      <!-- copy config files, that should not be stored inside the jar
           so the user can edit them easily -->
      <copy todir="${projectdir}\build\deploy">
          <fileset dir="${src.main}">
              <include name="wdb_compatibility.properties" />
          </fileset>
     	</copy>

      <!-- copy license files -->
      <copy todir="${projectdir}\build\deploy\licenses">
          <fileset dir="${projectdir}/dev-ressources/licenses">
              <include name="*" />
          </fileset>
      </copy>
        <!-- copy start script -->
        <delete file="${projectdir}\build\deploy\*.bat" />
        <copy todir="${projectdir}\build\deploy">
            <fileset dir="${projectdir}/dev-ressources">
                <include name="*.bat" />
                <include name="*.sh" />
            </fileset>
        </copy>
        <!-- hsqldb specific stuff -->
        <copy todir="${projectdir}\build\deploy">
            <fileset dir="${projectdir}/dev-ressources/hsqldb">
                <include name="*/**" />
            </fileset>
        </copy>
        <!-- database access -->
        <copy todir="${projectdir}\build\deploy">
            <fileset dir="${src.main}">
              <include name="*wdbearmanager_sql.properties" />
              <include name="log4j.xml" />
            </fileset>
        </copy>

        <!-- documentation -->
        <copy todir="${projectdir}\build\deploy\doc">
            <fileset dir="${projectdir}/../documentation">
                <include name="*.pdf" />
                <include name="version.txt" />
                <include name="**/*.html" />
                <include name="html/**/*.jpg" />
                <include name="html/**/*.gif" />
                <include name="html/**/*.png" />
            </fileset>
        </copy>
        <!-- copy config files
             They ARE inside the JAR but one can edit them outside, too -->

        <!-- WDBear format definitions
        WDB - Don't know what this stands for,maybe works database (From
        Microsoft works, but ppl say, that the format of the WoW client cache
        is not like the original works format, so I don't know and that's also
        a reason why I changed WDB to WDBear.
         -->
        <copy todir="${projectdir}\build\deploy\wdbear-config">
            <fileset dir="${projectdir}/../development/wdbear-config">
                <include name="*/**" />
            </fileset>
        </copy>
        
        <!-- patchSCP.xml -->
        <copy todir="${projectdir}\build\deploy\">
            <fileset dir="${projectdir}/../development">
                <include name="patchSCP.xml" />
            </fileset>
        </copy>


        <!-- db-update: Apply changes from version to version -->
        <copy todir="${projectdir}\build\deploy\db-update">
            <fileset dir="${projectdir}/../development/db-update">
                <include name="*.properties" />
            </fileset>
        </copy>
        <!-- python demo scripts -->
        <copy todir="${projectdir}\build\deploy\demo-scripts">
            <fileset dir="${projectdir}/../development/demo-scripts">
                <include name="*.py" />
            </fileset>
        </copy>
        <!-- python scripts, necessary for the application -->
        <copy todir="${projectdir}\build\deploy\scripts">
            <fileset dir="${projectdir}/../development/scripts">
                <include name="*.py" />
                <include name="*.properties" />
                <include name="help/**.**" />
            </fileset>
        </copy>
      
    </target> <!-- make-install -->

    <!--
    Create the project
    -->
    <target name="build" depends="copy3rdparty, compile, genJAR, make-install">
        <!-- delete non-obfuscated file 
    	<delete file ="${projectdir}/build/deploy/${application_jar}" />
    	-->
    </target>

  <!--
    Copy all needed 3rd party libraries to the deploy folder
    These libraries are needed for the client
    AND they are included in the EAR
    Hint:
    Make sure you add all needed JAR files here
  -->
    <target name="copy3rdparty" depends="cache.download">
        <!-- needed 3rd party libraries -->
        <!-- Make sure you added them to MANIFEST.MF file -->
        <copy todir="${projectdir}\build\deploy\jars" flatten="true">
          <fileset refid="project.lib"/>
        </copy>
    </target>

    <!--
    Build the project and create one big JAR that contains all
    external libraries: external.jar
    Why? Because its nice.
  -->
    <target name="build-FAT" depends="compile">
        <mkdir dir="${projectdir}\build\deploy_fat" />
        <copy todir="${projectdir}\build\deploy_fat">
            <fileset dir="${projectdir}/dev-ressources">
                <include name="*.bat" />
                <include name="*.sh" />
            </fileset>
        </copy>
        <!-- hsqldb specific stuff -->
        <copy todir="${projectdir}\build\deploy_fat">
            <fileset dir="${projectdir}/dev-ressources/hsqldb">
                <include name="*/**" />
            </fileset>
        </copy>
        <mkdir dir="${projectdir}\build\tmp\unjarred" />
        <unjar dest="${projectdir}\build\tmp\unjarred">
            <fileset dir="${projectdir}\build\deploy" casesensitive="yes">
                <include name="**/*.jar" />
                <include name="**/*.zip" />
            </fileset>
        </unjar>

        <jar jarfile="${projectdir}/build/deploy_fat/fat_${application_jar}"
            basedir="${projectdir}\build\tmp\unjarred" includes="**/*.*">
            <manifest>
                <attribute name="Built-By" value="${user.name}" />
                <attribute name="Class-Path" value="external.jar" />
                <attribute name="Manifest-Version" value="1.0" />
                <attribute name="Main-Class" value="com.gele." />
                <attribute name="Created-By" value="Kizura Zgabi" />
                <attribute name="Implementation-Vendor" value="com.gele" />
                <attribute name="Implementation-Title" value="WDBear Manager" />
                <attribute name="Implementation-Version" value="1.0" />
            </manifest>
        </jar>
    </target>


    <!--
    Start the test program using ANT
-->
    <target name="startTest" depends="genJAR">
        <echo message="Starting the test program" />
        <java jar="${projectdir}/build/deploy/${application_jar}"
              fork="true" failonerror="true"
              maxmemory="128m" classpathref="project.class.path">
        </java>
    </target>


    <!--
  Compile main program and modules

  Check if the source code for the MAIN program exists.
  
  It is possible, that the user of this build file does not own
  the source code for the main program.
-->
    
    <target name="obfuscate">
    <taskdef name="obfuscate" classname="com.yworks.yguard.ObfuscatorTask" 
        classpathref="project.class.path"/>
        <!-- the following can be adjusted to your needs -->
        <obfuscate mainclass="com.gele.tools.wow.wdbearmanager.WDBearManager"
            logfile="${obfuscationlog}"
            replaceclassnamestrings="true">
           <property name="error-checking" value="pedantic"/>
           <inoutpair in="${projectdir}/build/deploy/${application_jar}" 
               out="${projectdir}/build/deploy/obf_${application_jar}"/>
            <expose>
                      <class classes="protected" 
                                methods="protected" 
                                fields="protected"/>
            </expose>
<!--
           <expose>
              <class classes="public" 
                        methods="public" fields="public">
                    <patternset>
                        <include name="com.mycompany.publicapi.**.*"/>
                        <exclude name="com.mycompany.publicapi.private.*"/>
                    </patternset>
                </class>
           </expose>
-->
        </obfuscate>
    </target>
    
<!--
  Delete/Move all files, that should not be part of the distribution

-->
    <target name="prepare-delivery" > <!-- depends="build" -->
      <!--
        <delete dir="${projectdir}\build\deploy" />
      -->

        <!-- replace existing hsqldb with empty one -->
<!--
     <copy todir="${projectdir}\build\do-not-distribute\db0">
       <fileset dir="${projectdir}\build\deploy\db0">
         <include name="*/**" />
       </fileset>
     </copy>
-->
    </target>

  <!--
    All code taken from:

   Dependencies

    The dependencies task manages a set of external dependencies which may be downloaded
    from a remote repository, such as ibiblio.org. Uses a local cache to avoid repeated
    downloads.

    Compatibility:  Tested with 1.5.1, should work with 1.4+.
    URL:            http://www.httpunit.org/doc/dependencies.html
    Contact:        Russell Gold
    License:        MIT License
    
    ...
    Please download http://prdownloads.sourceforge.net/httpunit/ant-dependencies-0.5.zip?download
    and extract the ant-dependencies.jar to your ant lib directory.
    
    ...
    2005-Oct-14
    lousy.kizura@gmail.com

  -->
  <target name="cache.download" >
     <typedef classpath="${basedir}/dev-ressources/3rdParty/ant-dependencies.jar"
      resource="dependencies.properties" />
      <dependencies pathId="project.class.path" 
        fileSetId="project.lib"
        verbose="true">
        <dependency group="castor" version="0.9.7" />
        <dependency group="commons-cli" version="1.0" />
        <dependency group="commons-logging" version="1.0.4" />
        <dependency group="hsqldb" version="1.7.3.3" />
        <dependency group="jgoodies" version="1.2.2" artifact="looks"/>
        <dependency group="jython" version="2.1" />
        <dependency group="log4j" version="1.2.9" />
        <dependency group="mysql" version="3.1.13" artifact="mysql-connector-java"/>
        <dependency group="xerces" version="2.6.2" artifact="xercesImpl"/>
        <dependency group="xerces" version="2.6.2" artifact="xmlParserAPIs"/>
      </dependencies>
    </target>
  
  <target name="apidocs" 
      description="Generate API docs for the WDBearManager source">
      <delete dir = "${basedir}/build/deploy/doc/api" />
      <mkdir  dir = "${basedir}/build/deploy/doc/api" />
      <javadoc
          defaultexcludes  = "yes"
          use              = "yes"
          header           = "WDBearManager 1.2.0-W1.12.0 - lousy.kizura@gmail.com"
          doctitle         = "WDBearManager - Know what's in your client's cache"
          nodeprecatedlist = "yes"
          sourcepath       = "${basedir}/src/java"
          destdir          = "${basedir}/build/deploy/doc/api"
          packagenames     = "com.gele.tools.*"
          linkoffline      = "http://java.sun.com/j2se/1.4/docs/api
                              /usr/web/work/j2se/1.4/docs/api"
          additionalparam  = "-breakiterator "
      />
  </target>

</project>
